name: Status check on supported outlets

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '15 12 * * *'

jobs:
  test-outlets:
    name: Test all outlets
    runs-on: ubuntu-latest

    env:
      NYT_S_VALUE: "${{ secrets.NYT_S_VALUE }}"

    steps:
      - uses: actions/checkout@v4

      - name: Cache uv environment
        uses: actions/cache@v4
        with:
          path: ~/.local/share/uv
          key: uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}

      - uses: astral-sh/setup-uv@v6

      - name: Install xword-dl tool
        run: uv tool install .

      - name: Add uv tool directory to PATH
        run: echo "$HOME/.local/share/uv/tools/xword-dl/bin" >> $GITHUB_PATH

      - name: Install GNU parallel
        run: sudo apt-get install -y parallel

      - name: Generate test manifest
        run: |
          # Define all test cases as JSON records
          cat > tests.json << 'EOF'
          [
            {"name": "Atlantic latest", "cmd": "xword-dl atl"},
            {"name": "Atlantic by date", "cmd": "xword-dl atl -d 12/15/23"},

            {"name": "Billboard latest", "cmd": "xword-dl bill"},

            {"name": "Crossword Club latest", "cmd": "xword-dl club"},
            {"name": "Crossword Club by date", "cmd": "xword-dl club -d 1/3/23"},
            {"name": "Crossword Club by URL", "cmd": "xword-dl \"https://crosswordclub.com/puzzles/sunday-january-07-2024/\""},

            {"name": "Daily Beast latest", "cmd": "xword-dl db"},

            {"name": "Daily Pop latest", "cmd": "xword-dl pop"},

            {"name": "Der Standard latest", "cmd": "xword-dl std"},
            {"name": "Der Standard by URL", "cmd": "xword-dl \"https://www.derstandard.at/story/3000000201583/kreuzwortraetsel-h-10580\""},

            {"name": "Guardian Cryptic", "cmd": "xword-dl grdc"},
            {"name": "Guardian Everyman", "cmd": "xword-dl grde"},
            {"name": "Guardian Prize", "cmd": "xword-dl grdp"},
            {"name": "Guardian Quick", "cmd": "xword-dl grdq"},
            {"name": "Guardian Quiptic", "cmd": "xword-dl grdu"},
            {"name": "Guardian Speedy", "cmd": "xword-dl grds"},
            {"name": "Guardian Weekend", "cmd": "xword-dl grdw"},

            {"name": "LA Times latest", "cmd": "xword-dl lat"},
            {"name": "LA Times by date", "cmd": "xword-dl lat -d \"2022/12/14\""},
            {"name": "LA Times Mini latest", "cmd": "xword-dl latm"},
            {"name": "LA Times Mini by date", "cmd": "xword-dl latm -d \"july 20, 2025\""},

            {"name": "New Yorker latest", "cmd": "xword-dl tny"},
            {"name": "New Yorker by date", "cmd": "xword-dl tny -d \"3/31/23\""},
            {"name": "New Yorker by URL", "cmd": "xword-dl \"https://www.newyorker.com/puzzles-and-games-dept/crossword/2024/01/01\""},
            {"name": "New Yorker themed", "cmd": "xword-dl \"https://www.newyorker.com/puzzles-and-games-dept/crossword/2024/01/05\""},
            {"name": "New Yorker themed, special chars title", "cmd": "xword-dl tny -d 1/12/24"},
            {"name": "New Yorker Mini latest", "cmd": "xword-dl tnym"},
            {"name": "New Yorker Mini by date", "cmd": "xword-dl tnym -d \"5/16/25\""},
            {"name": "New Yorker Mini by URL", "cmd": "xword-dl \"https://www.newyorker.com/puzzles-and-games-dept/mini-crossword/2025/05/16\""},

            {"name": "Newsday latest", "cmd": "xword-dl nd"},
            {"name": "Newsday by date", "cmd": "xword-dl nd -d \"dec. 12, 2023\""},

            {"name": "Observer Everyman latest", "cmd": "xword-dl ever"},
            {"name": "Observer Everyman by URL", "cmd": "xword-dl 'https://observer.co.uk/puzzles/everyman/article/everyman-no-4109'"},
            {"name": "Observer Speedy latest", "cmd": "xword-dl spdy"},
            {"name": "Observer Speedy by URL", "cmd": "xword-dl 'https://observer.co.uk/puzzles/speedy/article/speedy-no-1563'"},

            {"name": "Puzzmo latest", "cmd": "xword-dl pzm"},
            {"name": "Puzzmo Big latest", "cmd": "xword-dl pzmb"},
            {"name": "Puzzmo by date", "cmd": "xword-dl pzm -d \"2024-08-02\""},
            {"name": "Puzzmo Big by date", "cmd": "xword-dl pzmb -d \"2025-04-21\""},

            {"name": "Simply Daily Puzzles", "cmd": "xword-dl sdp"},
            {"name": "Simply Daily Puzzles Cryptic", "cmd": "xword-dl sdpc"},
            {"name": "Simply Daily Puzzles Quick", "cmd": "xword-dl sdpq"},

            {"name": "Universal latest", "cmd": "xword-dl uni"},
            {"name": "Universal by date", "cmd": "xword-dl uni -d \"october 6, 2023\""},

            {"name": "USA Today latest", "cmd": "xword-dl usa"},
            {"name": "USA Today by date", "cmd": "xword-dl usa -d \"january 7, 2024\""},

            {"name": "Vox", "cmd": "xword-dl vox"},

            {"name": "Vulture", "cmd": "xword-dl vult"},
            {"name": "Vulture by URL", "cmd": "xword-dl \"https://www.vulture.com/article/daily-crossword-puzzle-june-19-2025.html\""},
            {"name": "Vulture by date", "cmd": "xword-dl vult -d \"may 21, 2025\""},

            {"name": "The Walrus", "cmd": "xword-dl wal"},

            {"name": "Washington Post latest", "cmd": "xword-dl wp"},
            {"name": "Washington Post by date", "cmd": "xword-dl wp -d \"6/22/25\""}
          ]
          EOF

          # Add NYT tests if credentials are available
          if [ -n "$NYT_S_VALUE" ]; then
            # Create temporary file with NYT tests
            cat > nyt_tests.json << 'EOF'
          [
            {"name": "NYT latest", "cmd": "xword-dl nyt --settings '{\"NYT-S\": \"'$NYT_S_VALUE'\"}'"},
            {"name": "NYT by date", "cmd": "xword-dl nyt --settings '{\"NYT-S\": \"'$NYT_S_VALUE'\"}' -d \"5/17/23\""},
            {"name": "NYT rebus", "cmd": "xword-dl nyt --settings '{\"NYT-S\": \"'$NYT_S_VALUE'\"}' -d \"aug 10, 2023\""},
            {"name": "NYT rebus special chars", "cmd": "xword-dl nyt --settings '{\"NYT-S\": \"'$NYT_S_VALUE'\"}' -d 7/17/22"},
            {"name": "NYT blanks and circles", "cmd": "xword-dl nyt --settings '{\"NYT-S\": \"'$NYT_S_VALUE'\"}' -d \"12/17/23\""},
            {"name": "NYT blank clues", "cmd": "xword-dl nyt --settings '{\"NYT-S\": \"'$NYT_S_VALUE'\"}' -d \"9/27/18\""}
          ]
          EOF
            # Merge the two JSON arrays
            jq -s '.[0] + .[1]' tests.json nyt_tests.json > all_tests.json
            mv all_tests.json tests.json
          else
            echo "Skipping NYT tests (NYT_S_VALUE secret not set)"
          fi

          # Convert JSON to TSV for GNU parallel
          jq -r '.[] | [.name, .cmd] | @tsv' tests.json > tests.tsv

      - name: Run tests in parallel
        run: |
          # Run tests with GNU parallel:
          # --jobs 20: max 20 parallel processes (matching previous max-parallel)
          # --halt never: continue even if tests fail (matching fail-fast: false)
          # --colsep '\t': use tab as delimiter
          # --tagstring '{1}': prefix output with test name
          # --joblog joblog.txt: track success/failure of each test
          # --results results: save stdout/stderr for each test
          # {2}: the command to run
          set +e  # Don't exit immediately on error
          parallel --jobs 20 --halt never --colsep '\t' --tagstring '[{1}]' --joblog joblog.txt --results results '{2}' :::: tests.tsv
          EXIT_CODE=$?
          set -e

          # Report results
          echo ""
          echo "================================"
          echo "Test Results Summary"
          echo "================================"

          # Count total, passed, and failed tests
          TOTAL=$(tail -n +2 joblog.txt | wc -l | tr -d ' ')
          FAILED=$(tail -n +2 joblog.txt | awk '$7 != 0' | wc -l | tr -d ' ')
          PASSED=$((TOTAL - FAILED))

          echo "Total tests: $TOTAL"
          echo "Passed: $PASSED"
          echo "Failed: $FAILED"

          # List failed tests if any
          if [ "$FAILED" -gt 0 ]; then
            echo ""
            echo "================================"
            echo "Failed Test Details"
            echo "================================"

            # Get sequence numbers and exit codes of failed jobs
            tail -n +2 joblog.txt | awk '$7 != 0 {print $1 "\t" $7}' | while IFS=$'\t' read -r seq exitcode; do
              TEST_NAME=$(sed -n "${seq}p" tests.tsv | cut -f1)
              echo ""
              echo "‚ùå $TEST_NAME (exit code: $exitcode)"
              echo "----------------------------------------"

              # Find the results directory by reading seq files
              RESULT_DIR=""
              while IFS= read -r -d '' seq_file; do
                if [ "$(cat "$seq_file")" = "$seq" ]; then
                  RESULT_DIR=$(dirname "$seq_file")
                  break
                fi
              done < <(find results -name "seq" -type f -print0)

              if [ -n "$RESULT_DIR" ]; then
                # Show stdout if it exists and has content
                if [ -f "$RESULT_DIR/stdout" ] && [ -s "$RESULT_DIR/stdout" ]; then
                  echo "Output:"
                  cat "$RESULT_DIR/stdout"
                fi

                # Show stderr if it exists and has content
                if [ -f "$RESULT_DIR/stderr" ] && [ -s "$RESULT_DIR/stderr" ]; then
                  echo "Error output:"
                  cat "$RESULT_DIR/stderr"
                fi

                # If both are empty or don't exist, note that
                if [ ! -s "$RESULT_DIR/stdout" ] && [ ! -s "$RESULT_DIR/stderr" ]; then
                  echo "(No output captured)"
                fi
              else
                echo "WARNING: Could not find results for this test"
              fi

              # Create GitHub Actions error annotation
              echo "::error::Test failed: $TEST_NAME (exit code: $exitcode)"
            done
            echo ""
            echo "================================"
          fi

          exit $EXIT_CODE